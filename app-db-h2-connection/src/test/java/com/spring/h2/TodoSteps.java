package com.spring.h2;

import com.spring.h2.dto.TodoRequest;
import com.spring.h2.dto.TodoResponse;
import com.spring.h2.exception.TodoNotFoundException;
import com.spring.h2.service.TodoService;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class TodoSteps {

    @Autowired
    private TestRestTemplate testRestTemplate;

    @Autowired
    private TodoService todoService;

    private List<TodoRequest> todoRequests = new ArrayList<>();
    private List<ResponseEntity<TodoResponse>> postResponses = new ArrayList<>();
    private ResponseEntity<TodoResponse> singleGetResponse;
    private ResponseEntity<TodoResponse[]> getResponse;
    private ResponseEntity<?> latestResponse;
    private Long retrievedId;

    @Given("the following todo details:")
    public void theFollowingTodoDetails(List<Map<String, String>> todoDetails) {
        todoRequests.clear();
        for (Map<String, String> details : todoDetails) {
            TodoRequest todoRequest = new TodoRequest(details.get("todo"), Boolean.parseBoolean(details.get("completed")));
            todoRequests.add(todoRequest);
        }
    }

    @When("I send a POST request to {string} with this todo")
    public void iSendAPOSTRequestToWithThisTodo(String endpoint) {
        postResponses.clear();
        for (TodoRequest todoRequest : todoRequests) {
            HttpEntity<TodoRequest> requestEntity = new HttpEntity<>(todoRequest);
            ResponseEntity<TodoResponse> response = testRestTemplate.postForEntity(endpoint, requestEntity, TodoResponse.class);
            postResponses.add(response);
            latestResponse = response;
        }
    }

    @Then("the response should contain the saved todo with an auto-generated ID")
    public void theResponseShouldContainTheSavedTodoWithAnAutoGeneratedID() {
        for (int i = 0; i < postResponses.size(); i++) {
            ResponseEntity<TodoResponse> response = postResponses.get(i);
            TodoRequest expected = todoRequests.get(i);
            TodoResponse actual = response.getBody();

            assertNotNull(actual, "Saved todo should not be null");
            assertNotNull(actual.getId(), "Saved todo ID should not be null");
            assertEquals(expected.getTodo(), actual.getTodo(), "Todo text should match");
            assertEquals(expected.isComplete(), actual.isComplete(), "Completion status should match");
        }
    }

    @And("the status code should be {int}")
    public void theStatusCodeShouldBe(int statusCode) {
        assertNotNull(latestResponse, "Latest response should not be null");
        assertEquals(statusCode, latestResponse.getStatusCode().value(), "Status code should match");
    }

    @And("the saved todo should exists in the database")
    public void theSavedTodoShouldExistsInTheDatabase() {
        for (ResponseEntity<TodoResponse> response : postResponses) {
            TodoResponse savedTodo = response.getBody();
            assertNotNull(savedTodo, "Saved todo should not be null");
            TodoResponse retrievedTodo = todoService.getTodoById(savedTodo.getId());
            assertEquals(savedTodo, retrievedTodo, "Saved todo should match the retrieved todo from the database");
        }
    }

    @When("I send a GET request to {string}")
    public void iSendAGETRequestTo(String endpoint) {
        getResponse = testRestTemplate.getForEntity(endpoint, TodoResponse[].class);
        latestResponse = getResponse;
    }

    @Then("the response should contain the following todos:")
    public void theResponseShouldContainTheFollowingTodos(List<Map<String, String>> expectedTodos) {
        TodoResponse[] todos = getResponse.getBody();
        assertNotNull(todos, "Todos response should not be null");

        for (int i = 0; i < expectedTodos.size(); i++) {
            Map<String, String> expectedTodo = expectedTodos.get(i);
            assertEquals(expectedTodo.get("todo"), todos[i].getTodo(), "Todo text should match");
            assertEquals(Boolean.parseBoolean(expectedTodo.get("completed")), todos[i].isComplete(), "Completion status should match");
        }
    }

    @And("the response header {string} should be {string}")
    public void theResponseHeaderShouldBe(String headerName, String expectedHeaderValue) {
        assertEquals(expectedHeaderValue, getResponse.getHeaders().getFirst(headerName), "Response header value should match");
    }

    @And("I retrieve the ID of the saved todo")
    public void iRetrieveTheIDOfTheSavedTodo() {
        assertFalse(postResponses.isEmpty(), "Post responses should not be empty");
        TodoResponse savedTodo = postResponses.getFirst().getBody();
        assertNotNull(savedTodo, "Saved todo should not be null");
        assertNotNull(savedTodo.getId(), "Saved todo ID should not be null");
        retrievedId = savedTodo.getId();
    }

    @When("I send a GET request to {string} with the retrieved ID")
    public void iSendAGETRequestToWithTheRetrievedID(String endpoint) {
        assertNotNull(retrievedId, "Retrieved ID should not be null");
        String url = endpoint.replace("{id}", String.valueOf(retrievedId));
        singleGetResponse = testRestTemplate.getForEntity(url, TodoResponse.class);
        latestResponse = singleGetResponse;
    }


    @Then("the response should contain the saved todo")
    public void theResponseShouldContainTheSavedTodo() {
        TodoResponse retrievedTodo = singleGetResponse.getBody();
        assertNotNull(retrievedTodo, "Retrieved todo should not be null");

        TodoResponse savedTodo = postResponses.getFirst().getBody();
        assertNotNull(savedTodo, "Saved todo should not be null");

        assertEquals(savedTodo.getId(), retrievedTodo.getId(), "Todo ID should match");
        assertEquals(savedTodo.getTodo(), retrievedTodo.getTodo(), "Todo text should match");
        assertEquals(savedTodo.isComplete(), retrievedTodo.isComplete(), "Completion status should match");
    }

    @And("the size of list should be {int}")
    public void theSizeOfListShouldBe(int expectedSize) {
        assertNotNull(getResponse.getBody(), "Todos response should not be null");
        assertEquals(expectedSize, getResponse.getBody().length, "Size of todos list should match");
    }

    @And("I send a PUT request to {string} with the following updated details:")
    public void iSendAPUTRequestToWithTheFollowingUpdatedDetails(String endpoint,  List<Map<String, String>> updatedDetails) {
        assertNotNull(retrievedId, "Retrieved ID should not be null");
        String url = endpoint.replace("{id}", String.valueOf(retrievedId));

        Map<String, String> details = updatedDetails.getFirst();
        TodoRequest updatedTodo = new TodoRequest(details.get("todo"), Boolean.parseBoolean(details.get("completed")));

        HttpEntity<TodoRequest> requestEntity = new HttpEntity<>(updatedTodo);
        singleGetResponse = testRestTemplate.exchange(url, HttpMethod.PUT, requestEntity, TodoResponse.class);
        latestResponse = singleGetResponse;
    }

    @Then("the response should contain the updated todo")
    public void theResponseShouldContainTheUpdatedTodo() {
        TodoResponse updatedTodo = singleGetResponse.getBody();
        assertNotNull(updatedTodo, "Updated todo should not be null");

        Map<String, String> expectedDetails = new HashMap<>();
        expectedDetails.put("todo", "Learn Testing");
        expectedDetails.put("completed", "true");

        assertEquals(expectedDetails.get("todo"), updatedTodo.getTodo(), "Todo text should match");
        assertEquals(Boolean.parseBoolean(expectedDetails.get("completed")), updatedTodo.isComplete(), "Completion status should match");
    }

    @And("the updated todo should exist in the database")
    public void theUpdatedTodoShouldExistInTheDatabase() {
        TodoResponse updatedTodo = singleGetResponse.getBody();
        assertNotNull(updatedTodo, "Updated todo should not be null");

        TodoResponse retrievedTodo = todoService.getTodoById(retrievedId);
        assertEquals(updatedTodo, retrievedTodo, "Updated todo should match the retrieved todo from the database");
    }

    @When("I send a DELETE request to {string} with the retrieved ID")
    public void iSendADELETERequestToWithTheRetrievedID(String endpoint) {
        assertNotNull(retrievedId, "Retrieved id should not be null");
        String url = endpoint.replace("{id}", String.valueOf(retrievedId));
        latestResponse = testRestTemplate.exchange(url, HttpMethod.DELETE, null, Void.class);
    }

    @And("the deleted todo should not exist in the database")
    public void theDeletedTodoShouldNotExistInTheDatabase() {
        assertNotNull(retrievedId, "Retrieved id should not be null");
        assertThrows(TodoNotFoundException.class, () -> todoService.getTodoById(retrievedId), "Todo should not exists in database.");
    }
}
